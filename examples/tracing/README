#
# ----------------------------------------------------------------------------
#
# Copyright 2019 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ----------------------------------------------------------------------------
#

0. Enable the ChopStix environment

> source <INSTALL_DIR>/share/chopstix/setup.sh

and make sure you have `chop` command in you PATH. 

1. First build the binary to trace:

> make daxpy

Te example code it is a simple kernel that performs floating point operations
over a vector. It has two parameters:

 TEST_SIZE : Size of the vector (default: 10000)
 TEST_ITER : Number of iterations (default: 10)

You can test the functionality and the execution time on your system after
compiling:

> time ./daxpy 

2. In order to trace this benchmark you need to define the region of interest (ROI).
One can dump the binary (objdump) and find the begin/end addresses for the
ROI. But if the ROI is a function, ChopStiX provides a command to automatically
get that information. The kernel function that we want to trace is named `daxpy`
and the binary is `daxpy. So, we can execute the following command to 
get that begin/end addresses automatically:

> chop-marks daxpy daxpy

3. To then run the tracer simply use the following command:

> chop trace 



    ./run_example.sh -begin 400 -end 600
    ./run_example.sh $(< test_x86)

These are other options:

    -data   : Where to save the data
    -save   : Save traced pages' content
    -code   : Extract code as well
    -active : Time active during tracing
    -wait   : Time waiting between tracing intervals

Once you have extracted the data, you can use it to generate test (.mpt) and
state (.mps) files. Additionally you can use the `--code` option to prune the .mpt
file and only incorporate extracted code pages.

    ./create_mp.py -d data -t test.mpt -s state.mps -i invocation
    ./create_mp.py -d data -t test.mpt -s state.mps -i invocation --code

In the future these scripts will be integrated into the ChopStiX main workflow.
