# User space ELF loader

**Current implementation is experimental and not complete**

## Motivation

The standalone ELF binaries generated using Microprobe from the trace dumped
using ChopStiX mimic exactly the original memory layout of the traced
application. This has the benefits of being able to reproduce exactly the same
addresses but can generate issues when loading the binary into memory before
starting execution. The reason is that the loader assumes that certain memory
ranges will be free and sometimes when trying to allocate memory is unable to
find a free slot. This results in different types of abnormal errors such
as unrecognized file format errors, loading initialization errors or just
segmentation faults. Sometimes errors are not reproducible as they depend
on the specific layout decided by ASLR (Address Space Layout Randomization).
In other cases, the ELF run correctly but errors appear when trying to run
it under GDB, for debugging or tracing more details.

We explored different solutions to mitigate these issues by any of them
provided a consistent solution. We explored the following options:

- Compiler the ELF binary using different options... static compiler, dynamic,
  without start files, with PIE, no PIE... None of them worked as the problem
  is related to the memory layout, which is hardcoded  in the linker script
  needed for compilation.
- Disable ASLR with `setarch $(uname -m) -R <cmd>`. This provided reproducible
  results, but did not solve the problem.
- Use different environment variable to control the loading/dynamic linking.
  Check `man ld.so` for further details. No options provided a workaround
  to the aforementioned problem.

## Approach

Since the ELF generated by Microprobe from the trace dumped do not need any
type relocation/dynamic linking support, it should be possible to implement
a user space loader without too much complexity. This solution has been
considered before (see reference [1,2]).

The use space loader should perform the following actions:

- Loader reads the ELF to execute and computes the address ranges where
  the ELF needs to be placed.
- Loader computes the addresses it is using.
- If loader address conflict with the ELF ones, we do need to relocate
  itself (at least the loading function) to a free not conflicting address
  space and transfer the execution to it to restart the process without
  conflict this time.
- Load the sections of the ELF to execute at the specified addresses.
- Transfer execution to the main symbol of the ELF to execute.

## References

[1] https://stackoverflow.com/questions/29689558/loading-a-non-relocatable-static-elf-binary-in-userspace
[2] https://stackoverflow.com/questions/13908276/loading-elf-file-in-c-in-user-space
