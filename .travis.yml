language: cpp
version: ~> 1.0
cache:
    ccache: false
    directories:
        - toolchain
        - /tmp/libpfm
    timeout: 1000
os:
    - linux
dist: bionic
compiler:
    - gcc
addons:
    apt:
        update: false
        packages:
            - cmake
            - cmake-data
            - shellcheck
            - linux-tools-generic
            - zlib1g-dev
            - g++-11
            - gcc-11
            - python3
            - python3-pip
            - python3-virtualenv
            - libsqlite3-dev
        sources:
            - ubuntu-toolchain-r-test
notifications:
    email:
        on_success: change
        on_failure: always
env:
    global:
        - CHOPSTIX_PERFMON_PREFIX=/tmp/libpfm
        - CTEST_OUTPUT_ON_FAILURE=1
        - CC=gcc-11
        - CXX=g++-11
        - FC=gfortran-11
stages:
  - shell_conventions
  - build_and_test
  - test
  - install
jobs:                                                                              
    fast_finish: true                                                              
    include:
        - stage: shell_conventions                                                 
          name: shell conventions amd64                                              
          arch: amd64
          script:                                                                  
              - set -e                                                             
              - shellcheck -x -s sh $(find . -name \*.sh) $(find . -name \*.sh.in) ./tools/chop-* ./test/drivers/* ./test/daxpy/*spec
        - stage: shell_conventions                                                 
          name: shell conventions ppc64le                                                 
          arch: ppc64le
          script:                                                                  
              - set -e                                                             
              - shellcheck -x -s sh $(find . -name \*.sh) $(find . -name \*.sh.in) ./tools/chop-* ./test/drivers/* ./test/daxpy/*spec
        - stage: shell_conventions                                                 
          name: shell conventions s390x                                           
          arch: s390x
          script:                                                                  
              - set -e                                                             
              - shellcheck -x -s sh $(find . -name \*.sh) $(find . -name \*.sh.in) ./tools/chop-* ./test/drivers/* ./test/daxpy/*spec
        - stage: build_and_test
          name: Build and test amd64
          arch: amd64
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install
              - make -j
              - make test
              - pip install -U pip virtualenv
              - make install
        - stage: build_and_test
          name: Build and test ppc64le
          arch: ppc64le 
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install
              - make -j
              - make test
        - stage: build_and_test
          name: Build and test s390x
          arch: s390x
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install
              - make -j
              - make test
        - stage: build_and_test
          name: Build and test amd64 build sqlite
          arch: amd64
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --build-sqlite
              - make -j
              - make test
              - pip install -U pip virtualenv
              - make install
        - stage: build_and_test
          name: Build and test ppc64le build sqlite
          arch: ppc64le 
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --build-sqlite
              - make -j
              - make test
        - stage: build_and_test
          name: Build and test s390x build sqlite
          arch: s390x
          script:
              - set -e
              - scripts/ci/install_libpfm.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --build-sqlite
              - make -j
              - make test
        - stage: build_and_test
          name: Build and test on amd64 for ppc64le
          arch: amd64
          before_install:
              - sudo apt-get -y install gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
          script:
              - set -e
              - CC=powerpc64le-linux-gnu-gcc ARCH=ppc scripts/ci/install_libpfm.sh
              - CC=powerpc64le-linux-gnu-gcc CHOST=powerpc64le-linux-gnu scripts/ci/install_zlib.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --enable-powerle
              - make -j
        - stage: build_and_test
          name: Build and test on amd64 for s390x
          arch: amd64
          before_install:
              - sudo apt-get -y install gcc-s390x-linux-gnu g++-s390x-linux-gnu
          script:
              - set -e
              - CC=s390x-linux-gnu-gcc ARCH=s390x scripts/ci/install_libpfm.sh
              - CC=s390x-linux-gnu-gcc CHOST=s390x-linux-gnu scripts/ci/install_zlib.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --enable-sysz
              - make -j
        - stage: build_and_test
          name: Build and test on amd64 for riscv
          arch: amd64
          before_install:
              - sudo apt-get -y install gcc-8-riscv64-linux-gnu gcc-riscv64-linux-gnu g++-8-riscv64-linux-gnu g++-riscv64-linux-gnu 
          script:
              - set -e
              - CC=riscv64-linux-gnu-gcc-8 ARCH=riscv64 scripts/ci/install_libpfm.sh
              - CC=riscv64-linux-gnu-gcc-8 CHOST=riscv64 scripts/ci/install_zlib.sh
              - mkdir build
              - cd build
              - ../configure --prefix /tmp/install --enable-riscv
              - make -j
